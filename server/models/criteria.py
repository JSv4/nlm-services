from typing import List

from server import util
from server.models.base_model_ import Model


class Criteria(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        question: str = "",
        templates: List[str] = [],
        headers: List[str] = [],
        expected_answer_type: str = "auto",
        group_flag: str = "auto",
        table_flag: str = "auto",
        page_start: int = -1,
        page_end: int = -1,
        criteria_rank: int = -1,
        enable_similar_search: bool = True,
        entity_types: List[str] = None,
        additional_questions: List[str] = None,
        before_context_window: int = 0,
        after_context_window: int = 0,
        **kwargs,
    ):  # noqa: E501
        """Criteria - a model defined in Swagger

        :param question: The question of this Criteria.  # noqa: E501
        :type question: str
        :param templates: The templates of this Criteria.  # noqa: E501
        :type templates: List[str]
        :param headers: The headers of this Criteria.  # noqa: E501
        :type headers: List[str]
        :param expected_answer_type: The expected_answer_type of this Criteria.  # noqa: E501
        :type expected_answer_type: str
        :param group_flag: The group_flag of this Criteria.  # noqa: E501
        :type group_flag: str
        :param table_flag: The table_flag of this Criteria.  # noqa: E501
        :type table_flag: str
        :param page_start: The page_start of this Criteria.  # noqa: E501
        :type page_start: int
        :param page_end: The page_end of this Criteria.  # noqa: E501
        :type page_end: int
        :param criteria_rank: The criteria_rank of this Criteria.  # noqa: E501
        :type criteria_rank: int
        :param enable_similar_search: The enable_similar_search of this Criteria.  # noqa: E501
        :type enable_similar_search: bool
        :param entity_types: The entity_types of this Criteria.  # noqa: E501
        :type entity_types: List[str]
        :param additional_questions: The additional_questions of this Criteria. used for additional extraction # noqa: E501
        :type additional_questions: List[str]
        :param before_context_window: The before_context_window of this Criteria.  # noqa: E501
        :type before_context_window: int
        :param after_context_window: The after_context_window of this Criteria.  # noqa: E501
        :type after_context_window: int
        """
        self.swagger_types = {
            "question": str,
            "templates": List[str],
            "headers": List[str],
            "expected_answer_type": str,
            "group_flag": str,
            "table_flag": str,
            "page_start": int,
            "page_end": int,
            "criteria_rank": int,
            "enable_similar_search": bool,
            "entity_types": List[str],
            "additional_questions": List[str],
            "before_context_window": int,
            "after_context_window": int,
        }

        self.attribute_map = {
            "question": "question",
            "templates": "templates",
            "headers": "headers",
            "expected_answer_type": "expectedAnswerType",
            "group_flag": "groupFlag",
            "table_flag": "tableFlag",
            "page_start": "pageStart",
            "page_end": "pageEnd",
            "criteria_rank": "criteriaRank",
            "enable_similar_search": "enableSimilarSearch",
            "entity_types": "entityTypes",
            "additional_questions": "additionalQuestions",
            "before_context_window": "beforeContextWindow",
            "after_context_window": "afterContextWindow",
        }

        self._question = question
        self._templates = templates
        self._headers = headers
        self._expected_answer_type = expected_answer_type
        self._group_flag = group_flag
        self._table_flag = table_flag
        self._page_start = page_start
        self._page_end = page_end
        self._criteria_rank = criteria_rank
        self._enable_similar_search = enable_similar_search
        self._entity_types = entity_types or []
        self._additional_questions = additional_questions or []
        self._before_context_window = before_context_window or 0
        self._after_context_window = after_context_window or 0

    @classmethod
    def from_dict(cls, dikt) -> "Criteria":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Criteria of this Criteria.  # noqa: E501
        :rtype: Criteria
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question(self) -> str:
        """Gets the question of this Criteria.


        :return: The question of this Criteria.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this Criteria.


        :param question: The question of this Criteria.
        :type question: str
        """

        self._question = question.replace("%7C", "|")

    @property
    def templates(self) -> List[str]:
        """Gets the templates of this Criteria.


        :return: The templates of this Criteria.
        :rtype: str
        """
        return self._templates

    @templates.setter
    def templates(self, templates: List[str]):
        """Sets the templates of this Criteria.


        :param templates: The templates of this Criteria.
        :type templates: List[str]
        """

        self._templates = templates

    @property
    def headers(self) -> List[str]:
        """Gets the headers of this Criteria.


        :return: The headers of this Criteria.
        :rtype: List[str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers: List[str]):
        """Sets the headers of this Criteria.


        :param headers: The headers of this Criteria.
        :type headers: List[str]
        """

        self._headers = headers

    @property
    def expected_answer_type(self) -> str:
        """Gets the expected_answer_type of this Criteria.


        :return: The expected_answer_type of this Criteria.
        :rtype: str
        """
        return self._expected_answer_type

    @expected_answer_type.setter
    def expected_answer_type(self, expected_answer_type: str):
        """Sets the expected_answer_type of this Criteria.


        :param expected_answer_type: The expected_answer_type of this Criteria.
        :type expected_answer_type: str
        """

        self._expected_answer_type = expected_answer_type

    @property
    def group_flag(self) -> str:
        """Gets the group_flag of this Criteria.


        :return: The group_flag of this Criteria.
        :rtype: str
        """
        return self._group_flag

    @group_flag.setter
    def group_flag(self, group_flag: str):
        """Sets the group_flag of this Criteria.


        :param group_flag: The group_flag of this Criteria.
        :type group_flag: str
        """

        self._group_flag = group_flag

    @property
    def table_flag(self) -> str:
        """Gets the table_flag of this Criteria.


        :return: The table_flag of this Criteria.
        :rtype: str
        """
        return self._table_flag

    @table_flag.setter
    def table_flag(self, table_flag: str):
        """Sets the table_flag of this Criteria.


        :param table_flag: The table_flag of this Criteria.
        :type table_flag: str
        """

        self._table_flag = table_flag

    @property
    def page_start(self) -> int:
        """Gets the page_start of this Criteria.


        :return: The page_start of this Criteria.
        :rtype: int
        """
        return self._page_start

    @page_start.setter
    def page_start(self, page_start: int):
        """Sets the page_start of this Criteria.


        :param page_start: The page_start of this Criteria.
        :type page_start: int
        """

        self._page_start = page_start

    @property
    def page_end(self) -> int:
        """Gets the page_end of this Criteria.


        :return: The page_end of this Criteria.
        :rtype: int
        """
        return self._page_end

    @page_end.setter
    def page_end(self, page_end: int):
        """Sets the page_end of this Criteria.


        :param page_end: The page_end of this Criteria.
        :type page_end: int
        """

        self._page_end = page_end

    @property
    def criteria_rank(self) -> int:
        """Gets the criteria_rank of this Criteria.


        :return: The criteria_rank of this Criteria.
        :rtype: int
        """
        return self._criteria_rank

    @criteria_rank.setter
    def criteria_rank(self, criteria_rank: int):
        """Sets the criteria_rank of this Criteria.


        :param criteria_rank: The criteria_rank of this Criteria.
        :type criteria_rank: int
        """

        self._criteria_rank = criteria_rank

    @property
    def enable_similar_search(self) -> bool:
        """Gets the enable_similar_search of this Criteria.


        :return: The enable_similar_search of this Criteria.
        :rtype: bool
        """
        return self._enable_similar_search

    @enable_similar_search.setter
    def enable_similar_search(self, enable_similar_search: bool):
        """Sets the enable_similar_search of this Criteria.


        :param enable_similar_search: The enable_similar_search of this Criteria.
        :type enable_similar_search: bool
        """

        self._enable_similar_search = enable_similar_search

    @property
    def entity_types(self) -> List[str]:
        """Gets the entity_types of this Criteria.


        :return: The entity_types of this Criteria.
        :rtype: List[str]
        """
        return self._entity_types

    @entity_types.setter
    def entity_types(self, entity_types: List[str]):
        """Sets the entity_types of this Criteria.


        :param entity_types: The entity_types of this Criteria.
        :type entity_types: List[str]
        """

        self._entity_types = entity_types

    @property
    def additional_questions(self) -> List[str]:
        """Gets the additional_questions of this Criteria.


        :return: The additional_questions of this Criteria.
        :rtype: List[str]
        """
        return self._additional_questions

    @additional_questions.setter
    def additional_questions(self, additional_questions: List[str]):
        """Sets the additional_questions of this Criteria.


        :param additional_questions: The additional_questions of this Criteria.
        :type additional_questions: List[str]
        """

        self._additional_questions = additional_questions

    @property
    def before_context_window(self) -> int:
        """Gets the before_context_window of this Criteria.


        :return: The before_context_window of this Criteria.
        :rtype: int
        """
        return self._before_context_window

    @before_context_window.setter
    def before_context_window(self, before_context_window: int):
        """Sets the before_context_window of this Criteria.


        :param before_context_window: The before_context_window of this Criteria.
        :type before_context_window: int
        """

        self._before_context_window = before_context_window

    @property
    def after_context_window(self) -> int:
        """Gets the after_context_window of this Criteria.


        :return: The after_context_window of this Criteria.
        :rtype: int
        """
        return self._after_context_window

    @after_context_window.setter
    def after_context_window(self, after_context_window: int):
        """Sets the after_context_window of this Criteria.


        :param after_context_window: The after_context_window of this Criteria.
        :type after_context_window: int
        """

        self._after_context_window = after_context_window
