from server import util
from server.models.base_model_ import Model


class IgnoreBlock(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        ignore_text: str = None,
        ignore_all_after: bool = False,
        block_type: str = None,
    ):  # noqa: E501
        """IgnoreBlock - a model defined in Swagger

        :param ignore_text: The ignore_text of this IgnoreBlock.  # noqa: E501
        :type ignore_text: str
        :param ignore_all_after: The ignore_all_after of this IgnoreBlock.  # noqa: E501
        :type ignore_all_after: bool
        :param block_type: The block_type of this IgnoreBlock.  # noqa: E501
        :type block_type: str
        """
        self.swagger_types = {
            "ignore_text": str,
            "ignore_all_after": bool,
            "block_type": str,
        }

        self.attribute_map = {
            "ignore_text": "ignoreText",
            "ignore_all_after": "ignoreAllAfter",
            "block_type": "blockType",
        }
        self._ignore_text = ignore_text
        self._ignore_all_after = ignore_all_after
        self._block_type = block_type

    @classmethod
    def from_dict(cls, dikt) -> "IgnoreBlock":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IgnoreBlock of this IgnoreBlock.  # noqa: E501
        :rtype: IgnoreBlock
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_text(self) -> str:
        """Gets the ignore_text of this IgnoreBlock.


        :return: The ignore_text of this IgnoreBlock.
        :rtype: str
        """
        return self._ignore_text

    @ignore_text.setter
    def ignore_text(self, ignore_text: str):
        """Sets the ignore_text of this IgnoreBlock.


        :param ignore_text: The ignore_text of this IgnoreBlock.
        :type ignore_text: str
        """

        self._ignore_text = ignore_text

    @property
    def ignore_all_after(self) -> bool:
        """Gets the ignore_all_after of this IgnoreBlock.


        :return: The ignore_all_after of this IgnoreBlock.
        :rtype: bool
        """
        return self._ignore_all_after

    @ignore_all_after.setter
    def ignore_all_after(self, ignore_all_after: bool):
        """Sets the ignore_all_after of this IgnoreBlock.


        :param ignore_all_after: The ignore_all_after of this IgnoreBlock.
        :type ignore_all_after: bool
        """

        self._ignore_all_after = ignore_all_after

    @property
    def block_type(self) -> str:
        """Gets the block_type of this IgnoreBlock.


        :return: The block_type of this IgnoreBlock.
        :rtype: str
        """
        return self._block_type

    @block_type.setter
    def block_type(self, block_type: str):
        """Sets the block_type of this IgnoreBlock.


        :param block_type: The block_type of this IgnoreBlock.
        :type block_type: str
        """
        # allowed_values = ["sent", "block", "header"]  # noqa: E501
        # if block_type not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `block_type` ({0}), must be one of {1}"
        #         .format(block_type, allowed_values)
        #     )

        self._block_type = block_type
