import pprint
import re  # noqa: F401

from server import util
from server.models.base_model_ import Model


class PaginationSettings(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "doc_per_page": int,
        "offset": int,
        "match_per_doc": int,
        "debug": bool,
        "topn": int,
    }

    attribute_map = {
        "doc_per_page": "docPerPage",
        "offset": "offset",
        "match_per_doc": "matchPerDoc",
        "debug": "debug",
        "topn": "topn",
    }

    def __init__(
        self,
        doc_per_page=None,
        offset=None,
        match_per_doc=None,
        debug=None,
        topn=None,
    ):  # noqa: E501
        """PaginationSettings - a model defined in Swagger"""  # noqa: E501
        self._doc_per_page = None
        self._offset = None
        self._match_per_doc = None
        self._debug = None
        self._topn = None
        self.discriminator = None
        if doc_per_page is not None:
            self.doc_per_page = doc_per_page
        if offset is not None:
            self.offset = offset
        if match_per_doc is not None:
            self.match_per_doc = match_per_doc
        if debug is not None:
            self.debug = debug
        if topn is not None:
            self.topn = topn

    @classmethod
    def from_dict(cls, dikt) -> "PaginationSettings":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaginationSettings of this PaginationSettings.  # noqa: E501
        :rtype: PaginationSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doc_per_page(self):
        """Gets the doc_per_page of this PaginationSettings.  # noqa: E501


        :return: The doc_per_page of this PaginationSettings.  # noqa: E501
        :rtype: int
        """
        return self._doc_per_page

    @doc_per_page.setter
    def doc_per_page(self, doc_per_page):
        """Sets the doc_per_page of this PaginationSettings.


        :param doc_per_page: The doc_per_page of this PaginationSettings.  # noqa: E501
        :type: int
        """

        self._doc_per_page = doc_per_page

    @property
    def offset(self):
        """Gets the offset of this PaginationSettings.  # noqa: E501


        :return: The offset of this PaginationSettings.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PaginationSettings.


        :param offset: The offset of this PaginationSettings.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def match_per_doc(self):
        """Gets the match_per_doc of this PaginationSettings.  # noqa: E501


        :return: The match_per_doc of this PaginationSettings.  # noqa: E501
        :rtype: int
        """
        return self._match_per_doc

    @match_per_doc.setter
    def match_per_doc(self, match_per_doc):
        """Sets the match_per_doc of this PaginationSettings.


        :param match_per_doc: The match_per_doc of this PaginationSettings.  # noqa: E501
        :type: int
        """

        self._match_per_doc = match_per_doc

    @property
    def debug(self):
        """Gets the debug of this PaginationSettings.  # noqa: E501


        :return: The debug of this PaginationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this PaginationSettings.


        :param debug: The debug of this PaginationSettings.  # noqa: E501
        :type: bool
        """

        self._debug = debug

    @property
    def topn(self):
        """Gets the topn of this PaginationSettings.  # noqa: E501


        :return: The topn of this PaginationSettings.  # noqa: E501
        :rtype: int
        """
        return self._topn

    @topn.setter
    def topn(self, topn):
        """Sets the topn of this PaginationSettings.


        :param topn: The topn of this PaginationSettings.  # noqa: E501
        :type: int
        """

        self._topn = topn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    ),
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    ),
                )
            else:
                result[attr] = value
        if issubclass(PaginationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
