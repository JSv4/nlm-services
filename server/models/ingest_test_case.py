# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class IngestTestCase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, correct: bool=None, correct_text: str=None, correct_type: str=None, block_text: str=None, block_type: str=None, block_html: str=None, page_idx: int=None, document_id: str=None, workspace_id: str=None, user_id: str=None):  # noqa: E501
        """IngestTestCase - a model defined in Swagger

        :param correct: The correct of this IngestTestCase.  # noqa: E501
        :type correct: bool
        :param correct_text: The correct_text of this IngestTestCase.  # noqa: E501
        :type correct_text: str
        :param correct_type: The correct_type of this IngestTestCase.  # noqa: E501
        :type correct_type: str
        :param block_text: The block_text of this IngestTestCase.  # noqa: E501
        :type block_text: str
        :param block_type: The block_type of this IngestTestCase.  # noqa: E501
        :type block_type: str
        :param block_html: The block_html of this IngestTestCase.  # noqa: E501
        :type block_html: str
        :param page_idx: The page_idx of this IngestTestCase.  # noqa: E501
        :type page_idx: int
        :param document_id: The document_id of this IngestTestCase.  # noqa: E501
        :type document_id: str
        :param workspace_id: The workspace_id of this IngestTestCase.  # noqa: E501
        :type workspace_id: str
        :param user_id: The user_id of this IngestTestCase.  # noqa: E501
        :type user_id: str
        """
        self.swagger_types = {
            'correct': bool,
            'correct_text': str,
            'correct_type': str,
            'block_text': str,
            'block_type': str,
            'block_html': str,
            'page_idx': int,
            'document_id': str,
            'workspace_id': str,
            'user_id': str
        }

        self.attribute_map = {
            'correct': 'correct',
            'correct_text': 'correctText',
            'correct_type': 'correctType',
            'block_text': 'blockText',
            'block_type': 'blockType',
            'block_html': 'blockHtml',
            'page_idx': 'pageIdx',
            'document_id': 'documentId',
            'workspace_id': 'workspaceId',
            'user_id': 'userId'
        }
        self._correct = correct
        self._correct_text = correct_text
        self._correct_type = correct_type
        self._block_text = block_text
        self._block_type = block_type
        self._block_html = block_html
        self._page_idx = page_idx
        self._document_id = document_id
        self._workspace_id = workspace_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt) -> 'IngestTestCase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IngestTestCase of this IngestTestCase.  # noqa: E501
        :rtype: IngestTestCase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correct(self) -> bool:
        """Gets the correct of this IngestTestCase.


        :return: The correct of this IngestTestCase.
        :rtype: bool
        """
        return self._correct

    @correct.setter
    def correct(self, correct: bool):
        """Sets the correct of this IngestTestCase.


        :param correct: The correct of this IngestTestCase.
        :type correct: bool
        """

        self._correct = correct

    @property
    def correct_text(self) -> str:
        """Gets the correct_text of this IngestTestCase.


        :return: The correct_text of this IngestTestCase.
        :rtype: str
        """
        return self._correct_text

    @correct_text.setter
    def correct_text(self, correct_text: str):
        """Sets the correct_text of this IngestTestCase.


        :param correct_text: The correct_text of this IngestTestCase.
        :type correct_text: str
        """

        self._correct_text = correct_text

    @property
    def correct_type(self) -> str:
        """Gets the correct_type of this IngestTestCase.


        :return: The correct_type of this IngestTestCase.
        :rtype: str
        """
        return self._correct_type

    @correct_type.setter
    def correct_type(self, correct_type: str):
        """Sets the correct_type of this IngestTestCase.


        :param correct_type: The correct_type of this IngestTestCase.
        :type correct_type: str
        """

        self._correct_type = correct_type

    @property
    def block_text(self) -> str:
        """Gets the block_text of this IngestTestCase.


        :return: The block_text of this IngestTestCase.
        :rtype: str
        """
        return self._block_text

    @block_text.setter
    def block_text(self, block_text: str):
        """Sets the block_text of this IngestTestCase.


        :param block_text: The block_text of this IngestTestCase.
        :type block_text: str
        """

        self._block_text = block_text

    @property
    def block_type(self) -> str:
        """Gets the block_type of this IngestTestCase.


        :return: The block_type of this IngestTestCase.
        :rtype: str
        """
        return self._block_type

    @block_type.setter
    def block_type(self, block_type: str):
        """Sets the block_type of this IngestTestCase.


        :param block_type: The block_type of this IngestTestCase.
        :type block_type: str
        """

        self._block_type = block_type

    @property
    def block_html(self) -> str:
        """Gets the block_html of this IngestTestCase.


        :return: The block_html of this IngestTestCase.
        :rtype: str
        """
        return self._block_html

    @block_html.setter
    def block_html(self, block_html: str):
        """Sets the block_html of this IngestTestCase.


        :param block_html: The block_html of this IngestTestCase.
        :type block_html: str
        """

        self._block_html = block_html

    @property
    def page_idx(self) -> int:
        """Gets the page_idx of this IngestTestCase.


        :return: The page_idx of this IngestTestCase.
        :rtype: int
        """
        return self._page_idx

    @page_idx.setter
    def page_idx(self, page_idx: int):
        """Sets the page_idx of this IngestTestCase.


        :param page_idx: The page_idx of this IngestTestCase.
        :type page_idx: int
        """

        self._page_idx = page_idx

    @property
    def document_id(self) -> str:
        """Gets the document_id of this IngestTestCase.


        :return: The document_id of this IngestTestCase.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id: str):
        """Sets the document_id of this IngestTestCase.


        :param document_id: The document_id of this IngestTestCase.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def workspace_id(self) -> str:
        """Gets the workspace_id of this IngestTestCase.


        :return: The workspace_id of this IngestTestCase.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: str):
        """Sets the workspace_id of this IngestTestCase.


        :param workspace_id: The workspace_id of this IngestTestCase.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this IngestTestCase.


        :return: The user_id of this IngestTestCase.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this IngestTestCase.


        :param user_id: The user_id of this IngestTestCase.
        :type user_id: str
        """

        self._user_id = user_id
