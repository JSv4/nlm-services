# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server.models.field import Field  # noqa: F401,E501
from server import util


class FieldContent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, active: bool=True, user_id: str=None, workspace_id: str=None, is_user_defined: bool=None, parent_bundle_id: str=None, templates: List=None, is_entered_field=None):  # noqa: E501
        """FieldContent - a model defined in Swagger

        :param id: The id of this FieldContent.  # noqa: E501
        :type id: str
        :param name: The name of this FieldContent.  # noqa: E501
        :type name: str
        :param active: The active of this FieldContent.  # noqa: E501
        :type active: bool
        :param user_id: The user_id of this FieldContent.  # noqa: E501
        :type user_id: str
        :param workspace_id: The workspace_id of this FieldContent.  # noqa: E501
        :type workspace_id: str
        :param is_user_defined: The is_user_defined of this FieldContent.  # noqa: E501
        :type is_user_defined: bool
        :param parent_bundle_id: The parent_bundle_id of this FieldContent.  # noqa: E501
        :type parent_bundle_id: str
        :param templates: The templates of this FieldContent.  # noqa: E501
        :type templates: List 
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'active': bool,
            'user_id': str,
            'workspace_id': str,
            'is_user_defined': bool,
            'parent_bundle_id': str,
            'templates': List
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'active': 'active',
            'user_id': 'userId',
            'workspace_id': 'workspaceId',
            'is_user_defined': 'isUserDefined',
            'parent_bundle_id': 'parentBundleId',
            'templates': 'templates'
        }
        self._id = id
        self._name = name
        self._active = active
        self._user_id = user_id
        self._workspace_id = workspace_id
        self._is_user_defined = is_user_defined
        self._parent_bundle_id = parent_bundle_id
        self._templates = templates

    @classmethod
    def from_dict(cls, dikt) -> 'FieldContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FieldContent of this FieldContent.  # noqa: E501
        :rtype: FieldContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this FieldContent.


        :return: The id of this FieldContent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this FieldContent.


        :param id: The id of this FieldContent.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this FieldContent.


        :return: The name of this FieldContent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FieldContent.


        :param name: The name of this FieldContent.
        :type name: str
        """

        self._name = name

    @property
    def active(self) -> bool:
        """Gets the active of this FieldContent.


        :return: The active of this FieldContent.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this FieldContent.


        :param active: The active of this FieldContent.
        :type active: bool
        """

        self._active = active

    @property
    def user_id(self) -> str:
        """Gets the user_id of this FieldContent.


        :return: The user_id of this FieldContent.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this FieldContent.


        :param user_id: The user_id of this FieldContent.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def workspace_id(self) -> str:
        """Gets the workspace_id of this FieldContent.


        :return: The workspace_id of this FieldContent.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: str):
        """Sets the workspace_id of this FieldContent.


        :param workspace_id: The workspace_id of this FieldContent.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id

    @property
    def is_user_defined(self) -> bool:
        """Gets the is_user_defined of this FieldContent.


        :return: The is_user_defined of this FieldContent.
        :rtype: bool
        """
        return self._is_user_defined

    @is_user_defined.setter
    def is_user_defined(self, is_user_defined: bool):
        """Sets the is_user_defined of this FieldContent.


        :param is_user_defined: The is_user_defined of this FieldContent.
        :type is_user_defined: bool
        """

        self._is_user_defined = is_user_defined

    @property
    def parent_bundle_id(self) -> str:
        """Gets the parent_bundle_id of this FieldContent.


        :return: The parent_bundle_id of this FieldContent.
        :rtype: str
        """
        return self._parent_bundle_id

    @parent_bundle_id.setter
    def parent_bundle_id(self, parent_bundle_id: str):
        """Sets the parent_bundle_id of this FieldContent.


        :param parent_bundle_id: The parent_bundle_id of this FieldContent.
        :type parent_bundle_id: str
        """

        self._parent_bundle_id = parent_bundle_id

    @property
    def templates(self) -> List:
        """Gets the templates of this FieldContent.


        :return: The templates of this FieldContent.
        :rtype: List
        """
        return self._templates

    @templates.setter
    def templates(self, templates: List):
        """Sets the templates of this FieldContent.


        :param templates: The templates of this FieldContent.
        :type templates: List
        """

        self._templates = templates
