from datetime import datetime  # noqa: F401
from typing import List

from server import util
from server.models.base_model_ import Model


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        id: str = None,
        email_id: str = None,
        first_name: str = None,
        last_name: str = None,
        active: bool = None,
        is_admin: bool = None,
        created_on: datetime = None,
        has_developer_account: bool = False,
        developer_app_id: str = None,
        expiry_time: datetime = None,
        subscription_plan: str = None,
        access_type: str = "",
        last_login: datetime = None,
        is_logged_in: bool = None,
        has_notifications: bool = False,
        workspace_notification_settings: dict = None,
        subscribed_workspaces: List[str] = None,
        restricted_workspaces: List[str] = None,
        included_features: List[str] = None,
        can_change_subscription: bool = False,
        stripe_conf: dict = None,
        **kwargs,
    ):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param email_id: The email_id of this User.  # noqa: E501
        :type email_id: str
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param active: The active of this User.  # noqa: E501
        :type active: bool
        :param is_admin: The is_admin of this User.  # noqa: E501
        :type is_admin: bool
        :param created_on: The created_on of this User.  # noqa: E501
        :type created_on: datetime
        :param has_developer_account: The has_developer_account of this User.  # noqa: E501
        :type has_developer_account: bool
        :param developer_app_id: The developer_app_id of this User.  # noqa: E501
        :type developer_app_id: str
        :param expiry_time: The expiry_time of this User.  # noqa: E501
        :type expiry_time: datetime
        :param subscription_plan: The subscription_plan of this User.  # noqa: E501
        :type subscription_plan: str
        :param access_type: The access_type of this User.  # noqa: E501
        :type access_type: str
        :param last_login: The last_login of this User.  # noqa: E501
        :type last_login: datetime
        :param is_logged_in: The is_logged_in of this User.  # noqa: E501
        :type is_logged_in: bool
        :param has_notifications: The has_notifications of this User.  # noqa: E501
        :type has_notifications: bool
        :param workspace_notification_settings: The workspace_notification_settings of this User.  # noqa: E501
        :type workspace_notification_settings: dict
        :param subscribed_workspaces: The subscribed_workspaces of this User.  # noqa: E501
        :type subscribed_workspaces: List[str]
        :param restricted_workspaces: The restricted_workspaces of this User.  # noqa: E501
        :type restricted_workspaces: List[str]
        :param included_features: The included_features of this User.  # noqa: E501
        :type included_features: List[str]
        :param stripe_conf: The stripe_conf of this User.  # noqa: E501
        :type stripe_conf: dict
        """
        self.swagger_types = {
            "id": str,
            "email_id": str,
            "first_name": str,
            "last_name": str,
            "active": bool,
            "is_admin": bool,
            "created_on": datetime,
            "has_developer_account": bool,
            "developer_app_id": str,
            "expiry_time": datetime,
            "subscription_plan": str,
            "access_type": str,
            "last_login": datetime,
            "is_logged_in": bool,
            "has_notifications": bool,
            "workspace_notification_settings": dict,
            "subscribed_workspaces": List[str],
            "restricted_workspaces": List[str],
            "included_features": List[str],
            "can_change_subscription": bool,
            "stripe_conf": dict,
        }

        self.attribute_map = {
            "id": "id",
            "email_id": "emailId",
            "first_name": "firstName",
            "last_name": "lastName",
            "active": "active",
            "is_admin": "isAdmin",
            "created_on": "createdOn",
            "has_developer_account": "hasDeveloperAccount",
            "developer_app_id": "developerAppId",
            "expiry_time": "expiry_time",
            "subscription_plan": "subscription_plan",
            "access_type": "accessType",
            "last_login": "lastLogin",
            "is_logged_in": "isLoggedIn",
            "has_notifications": "hasNotifications",
            "workspace_notification_settings": "workspaceNotificationSettings",
            "subscribed_workspaces": "subscribedWorkspaces",
            "restricted_workspaces": "restrictedWorkspaces",
            "included_features": "includedFeatures",
            "can_change_subscription": "canChangeSubscription",
            "stripe_conf": "stripeConf",
        }

        self._id = id
        self._email_id = email_id
        self._first_name = first_name
        self._last_name = last_name
        self._active = active
        self._is_admin = is_admin
        self._created_on = created_on
        self._has_developer_account = has_developer_account
        self._developer_app_id = developer_app_id
        self._expiry_time = expiry_time
        self._subscription_plan = subscription_plan
        self._access_type = access_type
        self._last_login = last_login
        self._is_logged_in = is_logged_in or False
        self._has_notifications = has_notifications
        self._workspace_notification_settings = workspace_notification_settings or {}
        self._subscribed_workspaces = subscribed_workspaces or []
        self._restricted_workspaces = restricted_workspaces or []
        self._included_features = included_features or []
        self._can_change_subscription = can_change_subscription or False
        self._stripe_conf = stripe_conf or {}

    @classmethod
    def from_dict(cls, dikt) -> "User":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def email_id(self) -> str:
        """Gets the email_id of this User.


        :return: The email_id of this User.
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id: str):
        """Sets the email_id of this User.


        :param email_id: The email_id of this User.
        :type email_id: str
        """

        self._email_id = email_id

    @property
    def first_name(self) -> str:
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def active(self) -> bool:
        """Gets the active of this User.


        :return: The active of this User.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this User.


        :param active: The active of this User.
        :type active: bool
        """

        self._active = active

    @property
    def is_admin(self) -> bool:
        """Gets the is_admin of this User.


        :return: The is_admin of this User.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin: bool):
        """Sets the is_admin of this User.


        :param is_admin: The is_admin of this User.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def created_on(self) -> datetime:
        """Gets the created_on of this User.


        :return: The created_on of this User.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on: datetime):
        """Sets the created_on of this User.


        :param created_on: The created_on of this User.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def has_developer_account(self) -> bool:
        """Gets the has_developer_account of this User.


        :return: The has_developer_account of this User.
        :rtype: bool
        """
        return self._has_developer_account

    @has_developer_account.setter
    def has_developer_account(self, has_developer_account: bool):
        """Sets the has_developer_account of this User.


        :param has_developer_account: The has_developer_account of this User.
        :type has_developer_account: bool
        """

        self._has_developer_account = has_developer_account

    @property
    def developer_app_id(self) -> str:
        """Gets the developer_app_id of this User.


        :return: The developer_app_id of this User.
        :rtype: str
        """
        return self._developer_app_id

    @developer_app_id.setter
    def developer_app_id(self, developer_app_id: str):
        """Sets the developer_app_id of this User.


        :param developer_app_id: The developer_app_id of this User.
        :type developer_app_id: str
        """

        self._developer_app_id = developer_app_id

    @property
    def expiry_time(self) -> datetime:
        """Gets the expiry_time of this User.


        :return: The expiry_time of this User.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time: datetime):
        """Sets the expiry_time of this User.


        :param expiry_time: The expiry_time of this User.
        :type expiry_time: datetime
        """

        self._expiry_time = expiry_time

    @property
    def subscription_plan(self) -> str:
        """Gets the subscription_plan of this User.


        :return: The subscription_plan of this User.
        :rtype: str
        """
        return self._subscription_plan

    @subscription_plan.setter
    def subscription_plan(self, subscription_plan: str):
        """Sets the subscription_plan of this User.


        :param subscription_plan: The subscription_plan of this User.
        :type subscription_plan: str
        """

        self._subscription_plan = subscription_plan

    @property
    def access_type(self) -> str:
        """Gets the access_type of this User.


        :return: The access_type of this User.
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type: str):
        """Sets the access_type of this User.


        :param access_type: The access_type of this User.
        :type access_type: str
        """

        self._access_type = access_type

    @property
    def last_login(self) -> datetime:
        """Gets the last_login of this User.


        :return: The last_login of this User.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login: datetime):
        """Sets the last_login of this User.


        :param last_login: The last_login of this User.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def is_logged_in(self) -> bool:
        """Gets the is_logged_in of this User.


        :return: The is_logged_in of this User.
        :rtype: bool
        """
        return self._is_logged_in

    @is_logged_in.setter
    def is_logged_in(self, is_logged_in: bool):
        """Sets the is_logged_in of this User.


        :param is_logged_in: The is_logged_in of this User.
        :type is_logged_in: bool
        """

        self._is_logged_in = is_logged_in

    @property
    def has_notifications(self) -> bool:
        """Gets the has_notifications of this User.


        :return: The has_notifications of this User.
        :rtype: bool
        """
        return self._has_notifications

    @has_notifications.setter
    def has_notifications(self, has_notifications: bool):
        """Sets the has_notifications of this User.


        :param has_notifications: The has_notifications of this User.
        :type has_notifications: bool
        """

        self._has_notifications = has_notifications

    @property
    def workspace_notification_settings(self) -> dict:
        """Gets the workspace_notification_settings of this User.


        :return: The workspace_notification_settings of this User.
        :rtype: dict
        """
        return self._workspace_notification_settings

    @workspace_notification_settings.setter
    def workspace_notification_settings(
        self,
        workspace_notification_settings: dict,
    ):
        """Sets the workspace_notification_settings of this User.


        :param workspace_notification_settings: The workspace_notification_settings of this User.
        :type workspace_notification_settings: dict
        """

        self._workspace_notification_settings = workspace_notification_settings

    @property
    def subscribed_workspaces(self) -> List[str]:
        """Gets the subscribed_workspaces of this User.


        :return: The subscribed_workspaces of this User.
        :rtype: List[str]
        """
        return self._subscribed_workspaces

    @subscribed_workspaces.setter
    def subscribed_workspaces(
        self,
        subscribed_workspaces: List[str],
    ):
        """Sets the subscribed_workspaces of this User.


        :param subscribed_workspaces: The subscribed_workspaces of this User.
        :type subscribed_workspaces: List[str]
        """

        self._subscribed_workspaces = subscribed_workspaces

    @property
    def restricted_workspaces(self) -> List[str]:
        """Gets the restricted_workspaces of this User.


        :return: The restricted_workspaces of this User.
        :rtype: List[str]
        """
        return self._restricted_workspaces

    @restricted_workspaces.setter
    def restricted_workspaces(
        self,
        restricted_workspaces: List[str],
    ):
        """Sets the restricted_workspaces of this User.


        :param restricted_workspaces: The restricted_workspaces of this User.
        :type restricted_workspaces: List[str]
        """

        self._restricted_workspaces = restricted_workspaces

    @property
    def included_features(self) -> List[str]:
        """Gets the included_features of this User.


        :return: The included_features of this User.
        :rtype: List[str]
        """
        return self._included_features

    @included_features.setter
    def included_features(
        self,
        included_features: List[str],
    ):
        """Sets the included_features of this User.


        :param included_features: The included_features of this User.
        :type included_features: List[str]
        """

        self._included_features = included_features

    @property
    def can_change_subscription(self) -> bool:
        """Gets the can_change_subscription of this User.


        :return: The can_change_subscription of this User.
        :rtype: bool
        """
        return self._can_change_subscription

    @can_change_subscription.setter
    def can_change_subscription(self, can_change_subscription: bool):
        """Sets the can_change_subscription of this User.


        :param can_change_subscription: The can_change_subscription of this User.
        :type can_change_subscription: bool
        """

        self._can_change_subscription = can_change_subscription

    @property
    def stripe_conf(self) -> dict:
        """Gets the stripe_conf of this User.


        :return: The stripe_conf of this User.
        :rtype: dict
        """
        return self._stripe_conf

    @stripe_conf.setter
    def stripe_conf(
        self,
        stripe_conf: dict,
    ):
        """Sets the stripe_conf of this User.


        :param stripe_conf: The workspace_notification_settings of this User.
        :type stripe_conf: dict
        """

        self._stripe_conf = stripe_conf
