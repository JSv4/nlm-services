from typing import List

from server import util
from server.models.base_model_ import Model


class GridSelector(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        workspace_id: str = None,
        field_bundle_id: str = None,
        doc_ids: List[str] = None,
        field_ids: List[str] = None,
        overwrite_cache: str = None,
        grid_query: object = None,
        distinct_field: str = None,
        return_top_fact_answer: bool = False,
    ):  # noqa: E501
        """GridSelector - a model defined in Swagger

        :param workspace_id: The workspace_id of this GridSelector.  # noqa: E501
        :type workspace_id: str
        :param field_bundle_id: The field_bundle_id of this GridSelector.  # noqa: E501
        :type field_bundle_id: str
        :param doc_ids: The doc_ids of this GridSelector.  # noqa: E501
        :type doc_ids: List[str]
        :param field_ids: The field_ids of this GridSelector.  # noqa: E501
        :type field_ids: List[str]
        :param overwrite_cache: The overwrite_cache of this GridSelector.  # noqa: E501
        :type overwrite_cache: str
        :param grid_query: The grid_query of this GridSelector.  # noqa: E501
        :type grid_query: object
        :param distinct_field: The distinct_field of this GridSelector.  # noqa: E501
        :type distinct_field: str
        :param return_top_fact_answer: The return_top_fact_answer of this GridSelector.  # noqa: E501
        :type return_top_fact_answer: boolean
        """
        self.swagger_types = {
            "workspace_id": str,
            "field_bundle_id": str,
            "doc_ids": List[str],
            "field_ids": List[str],
            "overwrite_cache": str,
            "grid_query": object,
            "distinct_field": str,
            "return_top_fact_answer": bool,
        }

        self.attribute_map = {
            "workspace_id": "workspaceId",
            "field_bundle_id": "fieldBundleId",
            "doc_ids": "docIds",
            "field_ids": "fieldIds",
            "overwrite_cache": "overwriteCache",
            "grid_query": "gridQuery",
            "distinct_field": "distinctField",
            "return_top_fact_answer": "returnTopFactAnswer",
        }
        self._workspace_id = workspace_id
        self._field_bundle_id = field_bundle_id
        self._doc_ids = doc_ids
        self._field_ids = field_ids
        self._overwrite_cache = overwrite_cache
        self._grid_query = grid_query
        self._distinct_field = distinct_field
        self._return_top_fact_answer = return_top_fact_answer or False

    @classmethod
    def from_dict(cls, dikt) -> "GridSelector":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GridSelector of this GridSelector.  # noqa: E501
        :rtype: GridSelector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workspace_id(self) -> str:
        """Gets the workspace_id of this GridSelector.


        :return: The workspace_id of this GridSelector.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: str):
        """Sets the workspace_id of this GridSelector.


        :param workspace_id: The workspace_id of this GridSelector.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id

    @property
    def field_bundle_id(self) -> str:
        """Gets the field_bundle_id of this GridSelector.


        :return: The field_bundle_id of this GridSelector.
        :rtype: str
        """
        return self._field_bundle_id

    @field_bundle_id.setter
    def field_bundle_id(self, field_bundle_id: str):
        """Sets the field_bundle_id of this GridSelector.


        :param field_bundle_id: The field_bundle_id of this GridSelector.
        :type field_bundle_id: str
        """

        self._field_bundle_id = field_bundle_id

    @property
    def doc_ids(self) -> List[str]:
        """Gets the doc_ids of this GridSelector.


        :return: The doc_ids of this GridSelector.
        :rtype: List[str]
        """
        return self._doc_ids

    @doc_ids.setter
    def doc_ids(self, doc_ids: str):
        """Sets the doc_ids of this GridSelector.


        :param doc_ids: The doc_ids of this GridSelector.
        :type doc_ids: List[str]
        """

        self._doc_ids = doc_ids

    @property
    def field_ids(self) -> List[str]:
        """Gets the field_ids of this GridSelector.


        :return: The field_ids of this GridSelector.
        :rtype: List[str]
        """
        return self._field_ids

    @field_ids.setter
    def field_ids(self, field_ids: List[str]):
        """Sets the field_ids of this GridSelector.


        :param field_ids: The field_ids of this GridSelector.
        :type field_ids: List[str]
        """

        self._field_ids = field_ids

    @property
    def overwrite_cache(self) -> str:
        """Gets the overwrite_cache of this GridSelector.


        :return: The overwrite_cache of this GridSelector.
        :rtype: str
        """
        return self._overwrite_cache

    @overwrite_cache.setter
    def overwrite_cache(self, overwrite_cache: str):
        """Sets the overwrite_cache of this GridSelector.


        :param overwrite_cache: The overwrite_cache of this GridSelector.
        :type overwrite_cache: str
        """

        self._overwrite_cache = overwrite_cache

    @property
    def grid_query(self) -> object:
        """Gets the grid_query of this GridSelector.


        :return: The grid_query of this GridSelector.
        :rtype: object
        """
        return self._grid_query

    @grid_query.setter
    def grid_query(self, grid_query: object):
        """Sets the grid_query of this GridSelector.


        :param grid_query: The grid_query of this GridSelector.
        :type grid_query: object
        """

        self._grid_query = grid_query

    @property
    def distinct_field(self) -> str:
        """Gets the distinct_field of this GridSelector.


        :return: The distinct_field of this GridSelector.
        :rtype: str
        """
        return self._distinct_field

    @distinct_field.setter
    def distinct_field(self, distinct_field: str):
        """Sets the distinct_field of this GridSelector.


        :param distinct_field: The distinct_field of this GridSelector.
        :type distinct_field: str
        """

        self._distinct_field = distinct_field

    @property
    def return_top_fact_answer(self) -> bool:
        """Gets the return_top_fact_answer of this GridSelector.


        :return: The return_top_fact_answer of this GridSelector.
        :rtype: bool
        """
        return self._return_top_fact_answer

    @return_top_fact_answer.setter
    def return_top_fact_answer(self, return_top_fact_answer: bool):
        """Sets the return_top_fact_answer of this GridSelector.


        :param return_top_fact_answer: The return_top_fact_answer of this GridSelector.
        :type return_top_fact_answer: bool
        """

        self._return_top_fact_answer = return_top_fact_answer
