from datetime import datetime
from typing import List

from server import util
from server.models.base_model_ import Model


class Workspace(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        id: str = None,
        name: str = None,
        user_id: str = None,
        active: bool = True,
        shared_with: List[str] = [],
        created_on: datetime = None,
        settings: dict = {},
        statistics: dict = {},
        collaborators: dict = {},
        subscribed_users: List[str] = None,
        stripe_conf: dict = None,
        **kwargs,
    ):  # noqa: E501
        """Workspace - a model defined in Swagger

        :param id: The id of this Workspace.  # noqa: E501
        :type id: str
        :param name: The name of this Workspace.  # noqa: E501
        :type name: str
        :param user_id: The user_id of this Workspace.  # noqa: E501
        :type user_id: str
        :param active: The active of this Workspace.  # noqa: E501
        :type active: bool
        :param shared_with: The shared_with of this Workspace.  # noqa: E501
        :type shared_with: List[str]
        :param created_on: The created_on of this Workspace.  # noqa: E501
        :type created_on: datetime
        :param settings: The settings of this Workspace.  # noqa: E501
        :type settings: dict
        :param statistics: The statistics of this Workspace.  # noqa: E501
        :type statistics: dict
        :param collaborators: The collaborators of this Workspace.  # noqa: E501
        :type collaborators: dict
        :param subscribed_users: The subscribed_users of this Workspace.  # noqa: E501
        :type subscribed_users: List[str]
        :param stripe_conf: The stripe_conf of this Workspace.  # noqa: E501
        :type stripe_conf: dict

        """
        self.swagger_types = {
            "id": str,
            "name": str,
            "user_id": str,
            "active": bool,
            "shared_with": List[str],
            "created_on": datetime,
            "settings": dict,
            "statistics": dict,
            "collaborators": dict,
            "subscribed_users": List[str],
            "stripe_conf": dict,
        }

        self.attribute_map = {
            "id": "id",
            "name": "name",
            "user_id": "userId",
            "active": "active",
            "shared_with": "sharedWith",
            "created_on": "createdOn",
            "settings": "settings",
            "statistics": "statistics",
            "collaborators": "collaborators",
            "subscribed_users": "subscribedUsers",
        }
        self._id = id
        self._name = (
            name
            if not name
            else name
            if name.lower() != "default"
            else "My Default Workspace"
        )
        self._user_id = user_id
        self._active = active
        self._shared_with = shared_with
        self._created_on = created_on
        self._settings = settings
        self._statistics = statistics
        self._collaborators = collaborators
        self._subscribed_users = subscribed_users or []
        self._stripe_conf = stripe_conf or {}

    @classmethod
    def from_dict(cls, dikt) -> "Workspace":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workspace of this Workspace.  # noqa: E501
        :rtype: Workspace
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Workspace.


        :return: The id of this Workspace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Workspace.


        :param id: The id of this Workspace.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Workspace.


        :return: The name of this Workspace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Workspace.


        :param name: The name of this Workspace.
        :type name: str
        """

        self._name = name

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Workspace.


        :return: The user_id of this Workspace.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Workspace.


        :param user_id: The user_id of this Workspace.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def active(self) -> bool:
        """Gets the active of this Workspace.


        :return: The active of this Workspace.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Workspace.


        :param active: The active of this Workspace.
        :type active: bool
        """

        self._active = active

    @property
    def shared_with(self) -> List[str]:
        """Gets the shared_with of this Workspace.


        :return: The shared_with of this Workspace.2015!

        :rtype: List[str]
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with: List[str]):
        """Sets the shared_with of this Workspace.


        :param shared_with: The shared_with of this Workspace.
        :type shared_with: List[str]
        """

        self._shared_with = shared_with

    @property
    def created_on(self) -> datetime:
        """Gets the created_on of this Workspace.


        :return: The created_on of this Workspace.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on: datetime):
        """Sets the created_on of this Workspace.


        :param created_on: The created_on of this Workspace.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def settings(self) -> dict:
        """Gets the settings of this Workspace.


        :return: The settings of this Workspace.
        :rtype: dict
        """
        return self._settings

    @settings.setter
    def settings(self, settings: dict):
        """Sets the settings of this Workspace.


        :param settings: The settings of this Workspace.
        :type settings: dict
        """

        self._settings = settings

    @property
    def statistics(self) -> dict:
        """Gets the statistics of this Workspace.


        :return: The statistics of this Workspace.
        :rtype: dict
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics: dict):
        """Sets the statistics of this Workspace.


        :param statistics: The statistics of this Workspace.
        :type statistics: dict
        """

        self._statistics = statistics

    @property
    def collaborators(self) -> dict:
        """Gets the collaborators of this Workspace.


        :return: The collaborators of this Workspace.
        :rtype: dict
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators: dict):
        """Sets the collaborators of this Workspace.


        :param collaborators: The collaborators of this Workspace.
        :type collaborators: dict
        """

        self._collaborators = collaborators

    @property
    def subscribed_users(self) -> List[str]:
        """Gets the subscribed_users of this Workspace.


        :return: The subscribed_users of this Workspace.
        :rtype: List[str]
        """
        return self._subscribed_users

    @subscribed_users.setter
    def subscribed_users(self, subscribed_users: List[str]):
        """Sets the subscribed_users of this Workspace.


        :param subscribed_users: The subscribed_users of this Workspace.
        :type subscribed_users: List[str]
        """

        self._subscribed_users = subscribed_users

    @property
    def stripe_conf(self) -> dict:
        """Gets the stripe_conf of this Workspace.


        :return: The stripe_conf of this Workspace.
        :rtype: dict
        """
        return self._stripe_conf

    @stripe_conf.setter
    def stripe_conf(self, stripe_conf: dict):
        """Sets the stripe_conf of this Workspace.


        :param stripe_conf: The stripe_conf of this Workspace.
        :type stripe_conf: dict
        """

        self._stripe_conf = stripe_conf
