from typing import List

from server import util
from server.models.base_model_ import Model


class BBox(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        file_idx: str = None,
        block_idx: int = None,
        page_idx: int = None,
        block_type: str = None,
        bbox: List[float] = None,
        audited: bool = False,
        split: str = None,
    ):  # noqa: E501
        """BBox - a model defined in Swagger

        :param id: The id of this BBox.  # noqa: E501
        :type id: str
        :param file_idx: The file_idx of this BBox.  # noqa: E501
        :type file_idx: str
        :param block_idx: The block_idx of this BBox.  # noqa: E501
        :type block_idx: int
        :param page_idx: The page_idx of this BBox.  # noqa: E501
        :type page_idx: int
        :param block_type: The block_type of this BBox.  # noqa: E501
        :type block_type: str
        :param bbox: The bbox of this BBox.  # noqa: E501
        :type bbox: List[float]
        :param audited: The audited of this BBox.  # noqa: E501
        :type audited: bool
        :param split: The split of this BBox.  # noqa: E501
        :type split: str
        """
        self.swagger_types = {
            "file_idx": str,
            "block_idx": int,
            "page_idx": int,
            "block_type": str,
            "bbox": List[float],
            "audited": bool,
            "split": str,
        }

        self.attribute_map = {
            "file_idx": "docId",
            "block_idx": "blockId",
            "page_idx": "pageId",
            "block_type": "blockType",
            "bbox": "bbox",
            "audited": "audited",
            "split": "split",
        }
        self._file_idx = file_idx
        self._block_idx = block_idx
        self._page_idx = page_idx
        self._block_type = block_type
        self._bbox = bbox
        self._audited = audited
        self._split = split

    @classmethod
    def from_dict(cls, dikt) -> "BBox":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BBox of this BBox.  # noqa: E501
        :rtype: BBox
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_idx(self) -> str:
        """Gets the file_idx of this BBox.


        :return: The file_idx of this BBox.
        :rtype: str
        """
        return self._file_idx

    @file_idx.setter
    def file_idx(self, file_idx: str):
        """Sets the file_idx of this BBox.


        :param file_idx: The file_idx of this BBox.
        :type file_idx: str
        """

        self._file_idx = file_idx

    @property
    def block_idx(self) -> int:
        """Gets the block_idx of this BBox.


        :return: The block_idx of this BBox.
        :rtype: int
        """
        return self._block_idx

    @block_idx.setter
    def block_idx(self, block_idx: int):
        """Sets the block_idx of this BBox.


        :param block_idx: The block_idx of this BBox.
        :type block_idx: int
        """

        self._block_idx = block_idx

    @property
    def page_idx(self) -> int:
        """Gets the page_idx of this BBox.


        :return: The page_idx of this BBox.
        :rtype: int
        """
        return self._page_idx

    @page_idx.setter
    def page_idx(self, page_idx: int):
        """Sets the page_idx of this BBox.


        :param page_idx: The page_idx of this BBox.
        :type page_idx: int
        """

        self._page_idx = page_idx

    @property
    def block_type(self) -> str:
        """Gets the block_type of this BBox.


        :return: The block_type of this BBox.
        :rtype: str
        """
        return self._block_type

    @block_type.setter
    def block_type(self, block_type: str):
        """Sets the block_type of this BBox.


        :param block_type: The block_type of this BBox.
        :type block_type: str
        """

        self._block_type = block_type

    @property
    def bbox(self) -> List[float]:
        """Gets the bbox of this BBox.


        :return: The bbox of this BBox.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox: List[float]):
        """Sets the bbox of this BBox.


        :param bbox: The bbox of this BBox.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def audited(self) -> bool:
        """Gets the audited of this BBox.


        :return: The audited of this BBox.
        :rtype: bool
        """
        return self._audited

    @audited.setter
    def audited(self, audited: bool):
        """Sets the audited of this BBox.


        :param audited: The bbox of this BBox.
        :type audited: bool
        """

        self._audited = audited

    @property
    def split(self) -> str:
        """Gets the split of this BBox.


        :return: The split of this BBox.
        :rtype: str
        """
        return self._split

    @split.setter
    def split(self, split: str):
        """Sets the split of this BBox.


        :param split: The split of this BBox.
        :type split: str
        """

        self._split = split
