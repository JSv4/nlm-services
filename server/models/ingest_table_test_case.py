# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class IngestTableTestCase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, doc_id: str=None, user_id: str=None, workspace_id: str=None, html_text: str=None, tag: str=None):  # noqa: E501
        """IngestTableTestCase - a model defined in Swagger

        :param doc_id: The doc_id of this IngestTableTestCase.  # noqa: E501
        :type doc_id: str
        :param user_id: The user_id of this IngestTableTestCase.  # noqa: E501
        :type user_id: str
        :param workspace_id: The workspace_id of this IngestTableTestCase.  # noqa: E501
        :type workspace_id: str
        :param html_text: The html_text of this IngestTableTestCase.  # noqa: E501
        :type html_text: str
        :param tag: The tag of this IngestTableTestCase.  # noqa: E501
        :type tag: str
        """
        self.swagger_types = {
            'doc_id': str,
            'user_id': str,
            'workspace_id': str,
            'html_text': str,
            'tag': str
        }

        self.attribute_map = {
            'doc_id': 'doc_id',
            'user_id': 'user_id',
            'workspace_id': 'workspace_id',
            'html_text': 'html_text',
            'tag': 'tag'
        }
        self._doc_id = doc_id
        self._user_id = user_id
        self._workspace_id = workspace_id
        self._html_text = html_text
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> 'IngestTableTestCase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IngestTableTestCase of this IngestTableTestCase.  # noqa: E501
        :rtype: IngestTableTestCase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doc_id(self) -> str:
        """Gets the doc_id of this IngestTableTestCase.


        :return: The doc_id of this IngestTableTestCase.
        :rtype: str
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id: str):
        """Sets the doc_id of this IngestTableTestCase.


        :param doc_id: The doc_id of this IngestTableTestCase.
        :type doc_id: str
        """

        self._doc_id = doc_id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this IngestTableTestCase.


        :return: The user_id of this IngestTableTestCase.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this IngestTableTestCase.


        :param user_id: The user_id of this IngestTableTestCase.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def workspace_id(self) -> str:
        """Gets the workspace_id of this IngestTableTestCase.


        :return: The workspace_id of this IngestTableTestCase.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: str):
        """Sets the workspace_id of this IngestTableTestCase.


        :param workspace_id: The workspace_id of this IngestTableTestCase.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id

    @property
    def html_text(self) -> str:
        """Gets the html_text of this IngestTableTestCase.


        :return: The html_text of this IngestTableTestCase.
        :rtype: str
        """
        return self._html_text

    @html_text.setter
    def html_text(self, html_text: str):
        """Sets the html_text of this IngestTableTestCase.


        :param html_text: The html_text of this IngestTableTestCase.
        :type html_text: str
        """

        self._html_text = html_text

    @property
    def tag(self) -> str:
        """Gets the tag of this IngestTableTestCase.


        :return: The tag of this IngestTableTestCase.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag: str):
        """Sets the tag of this IngestTableTestCase.


        :param tag: The tag of this IngestTableTestCase.
        :type tag: str
        """

        self._tag = tag
