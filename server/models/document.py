from datetime import datetime

from server import util
from server.models.base_model_ import Model


class Document(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        id: str = None,
        title: str = None,
        name: str = None,
        doc_location: str = None,
        user_id: str = None,
        workspace_id: str = None,
        parent_folder: str = None,
        file_size: float = None,
        mime_type: str = None,
        checksum: str = None,
        created_on: datetime = None,
        is_deleted: bool = None,
        status: str = None,
        rendered_file_location: str = None,
        rendered_json_file_location: str = None,
        source_url: str = None,
        update: bool = None,
        inferred_title: str = None,
        meta: object = None,
        **kw,
    ):  # noqa: E501
        """Document - a model defined in Swagger

        :param id: The id of this Document.  # noqa: E501
        :type id: str
        :param title: The title of this Document.  # noqa: E501
        :type title: str
        :param name: The name of this Document.  # noqa: E501
        :type name: str
        :param doc_location: The doc_location of this Document.  # noqa: E501
        :type doc_location: str
        :param user_id: The user_id of this Document.  # noqa: E501
        :type user_id: str
        :param workspace_id: The workspace_id of this Document.  # noqa: E501
        :type workspace_id: str
        :param parent_folder: The parent_folder of this Document.  # noqa: E501
        :type parent_folder: str
        :param file_size: The file_size of this Document.  # noqa: E501
        :type file_size: float
        :param mime_type: The mime_type of this Document.  # noqa: E501
        :type mime_type: str
        :param checksum: The checksum of this Document.  # noqa: E501
        :type checksum: str
        :param created_on: The created_on of this Document.  # noqa: E501
        :type created_on: datetime
        :param is_deleted: The is_deleted of this Document.  # noqa: E501
        :type is_deleted: bool
        :param status: The status of this Document.  # noqa: E501
        :type status: str
        :param rendered_file_location: The rendered_file_location of this Document.  # noqa: E501
        :type rendered_file_location: str
        :param rendered_json_file_location: The rendered_json_file_location of this Document.  # noqa: E501
        :type rendered_json_file_location: str
        :param source_url: The source_url of this Document.  # noqa: E501
        :type source_url: str
        :param update: The update of this Document.  # noqa: E501
        :type update: bool
        :param inferred_title: The inferred_title of this Document.  # noqa: E501
        :type inferred_title: str
        """
        self.swagger_types = {
            "id": str,
            "title": str,
            "name": str,
            "doc_location": str,
            "user_id": str,
            "workspace_id": str,
            "parent_folder": str,
            "file_size": float,
            "mime_type": str,
            "checksum": str,
            "created_on": datetime,
            "is_deleted": bool,
            "status": str,
            "rendered_file_location": str,
            "rendered_json_file_location": str,
            "source_url": str,
            "update": bool,
            "inferred_title": str,
            "meta": object,
        }

        self.attribute_map = {
            "id": "id",
            "title": "title",
            "name": "name",
            "doc_location": "docLocation",
            "user_id": "userId",
            "workspace_id": "workspaceId",
            "parent_folder": "parentFolder",
            "file_size": "fileSize",
            "mime_type": "mimeType",
            "checksum": "checksum",
            "created_on": "createdOn",
            "is_deleted": "isDeleted",
            "status": "status",
            "rendered_file_location": "renderedFileLocation",
            "rendered_json_file_location": "renderedJsonFileLocation",
            "source_url": "sourceUrl",
            "update": "update",
            "inferred_title": "inferred_title",
            "meta": "meta",
        }
        self._id = id
        self._title = title
        self._name = name
        self._doc_location = doc_location
        self._user_id = user_id
        self._workspace_id = workspace_id
        self._parent_folder = parent_folder
        self._file_size = file_size
        self._mime_type = mime_type
        self._checksum = checksum
        self._created_on = created_on
        self._is_deleted = is_deleted
        self._status = status
        self._rendered_file_location = rendered_file_location
        self._rendered_json_file_location = rendered_json_file_location
        self._source_url = source_url
        self._update = update
        self._inferred_title = inferred_title
        self._meta = meta or {}

    @classmethod
    def from_dict(cls, dikt) -> "Document":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Document of this Document.  # noqa: E501
        :rtype: Document
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Document.


        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Document.


        :param id: The id of this Document.
        :type id: str
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Document.


        :return: The title of this Document.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Document.


        :param title: The title of this Document.
        :type title: str
        """

        self._title = title

    @property
    def name(self) -> str:
        """Gets the name of this Document.


        :return: The name of this Document.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Document.


        :param name: The name of this Document.
        :type name: str
        """

        self._name = name

    @property
    def doc_location(self) -> str:
        """Gets the doc_location of this Document.


        :return: The doc_location of this Document.
        :rtype: str
        """
        return self._doc_location

    @doc_location.setter
    def doc_location(self, doc_location: str):
        """Sets the doc_location of this Document.


        :param doc_location: The doc_location of this Document.
        :type doc_location: str
        """

        self._doc_location = doc_location

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Document.


        :return: The user_id of this Document.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Document.


        :param user_id: The user_id of this Document.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def workspace_id(self) -> str:
        """Gets the workspace_id of this Document.


        :return: The workspace_id of this Document.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: str):
        """Sets the workspace_id of this Document.


        :param workspace_id: The workspace_id of this Document.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id

    @property
    def parent_folder(self) -> str:
        """Gets the parent_folder of this Document.


        :return: The parent_folder of this Document.
        :rtype: str
        """
        return self._parent_folder

    @parent_folder.setter
    def parent_folder(self, parent_folder: str):
        """Sets the parent_folder of this Document.


        :param parent_folder: The parent_folder of this Document.
        :type parent_folder: str
        """

        self._parent_folder = parent_folder

    @property
    def file_size(self) -> float:
        """Gets the file_size of this Document.


        :return: The file_size of this Document.
        :rtype: float
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size: float):
        """Sets the file_size of this Document.


        :param file_size: The file_size of this Document.
        :type file_size: float
        """

        self._file_size = file_size

    @property
    def mime_type(self) -> str:
        """Gets the mime_type of this Document.


        :return: The mime_type of this Document.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type: str):
        """Sets the mime_type of this Document.


        :param mime_type: The mime_type of this Document.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def checksum(self) -> str:
        """Gets the checksum of this Document.


        :return: The checksum of this Document.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum: str):
        """Sets the checksum of this Document.


        :param checksum: The checksum of this Document.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def created_on(self) -> datetime:
        """Gets the created_on of this Document.


        :return: The created_on of this Document.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on: datetime):
        """Sets the created_on of this Document.


        :param created_on: The created_on of this Document.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def is_deleted(self) -> bool:
        """Gets the is_deleted of this Document.


        :return: The is_deleted of this Document.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted: bool):
        """Sets the is_deleted of this Document.


        :param is_deleted: The is_deleted of this Document.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def status(self) -> str:
        """Gets the status of this Document.


        :return: The status of this Document.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Document.


        :param status: The status of this Document.
        :type status: str
        """
        allowed_values = [
            "ready_for_ingestion",
            "ingest_inprogress",
            "ingest_failed",
            "ingest_ok",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({}), must be one of {}".format(
                    status,
                    allowed_values,
                ),
            )

        self._status = status

    @property
    def rendered_file_location(self) -> str:
        """Gets the rendered_file_location of this Document.


        :return: The rendered_file_location of this Document.
        :rtype: str
        """
        return self._rendered_file_location

    @rendered_file_location.setter
    def rendered_file_location(self, rendered_file_location: str):
        """Sets the rendered_file_location of this Document.


        :param rendered_file_location: The rendered_file_location of this Document.
        :type rendered_file_location: str
        """

        self._rendered_file_location = rendered_file_location

    @property
    def rendered_json_file_location(self) -> str:
        """Gets the rendered_json_file_location of this Document.


        :return: The rendered_json_file_location of this Document.
        :rtype: str
        """
        return self._rendered_json_file_location

    @rendered_json_file_location.setter
    def rendered_json_file_location(self, rendered_json_file_location: str):
        """Sets the rendered_json_file_location of this Document.


        :param rendered_json_file_location: The rendered_json_file_location of this Document.
        :type rendered_json_file_location: str
        """

        self._rendered_json_file_location = rendered_json_file_location

    @property
    def source_url(self) -> str:
        """Gets the source_url of this Document.


        :return: The source_url of this Document.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url: str):
        """Sets the source_url of this Document.


        :param source_url: The source_url of this Document.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def update(self) -> bool:
        """Gets the update of this Document.


        :return: The update of this Document.
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update: bool):
        """Sets the update of this Document.


        :param update: The update of this Document.
        :type update: bool
        """

        self._update = update

    @property
    def inferred_title(self) -> str:
        """Gets the inferred_title of this Document.


        :return: The inferred_title of this Document.
        :rtype: str
        """
        return self._inferred_title

    @inferred_title.setter
    def inferred_title(self, inferred_title: str):
        """Sets the inferred_title of this Document.


        :param inferred_title: The inferred_title of this Document.
        :type inferred_title: str
        """

        self._inferred_title = inferred_title

    @property
    def meta(self) -> object:
        """Gets the meta of this Document.


        :return: The meta of this Document.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta: object):
        """Sets the meta of this Document.


        :param meta: The meta of this Document.
        :type meta: object
        """

        self._meta = meta
