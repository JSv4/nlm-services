from typing import List

from server import util
from server.models.base_model_ import Model
from server.models.metric_data import MetricData  # noqa: F401,E501


class UsageMetric(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        user_id: str = None,
        reported_on: str = None,
        subscription_detail: str = None,
        general_usage: List[MetricData] = None,
        dev_api_usage: List[MetricData] = None,
    ):  # noqa: E501
        """UsageMetric - a model defined in Swagger

        :param user_id: The user_id of this UsageMetric.  # noqa: E501
        :type user_id: str
        :param reported_on: The reported_on of this UsageMetric.  # noqa: E501
        :type reported_on: str
        :param subscription_detail: The subscription_detail of this UsageMetric.  # noqa: E501
        :type subscription_detail: str
        :param general_usage: The general_usage of this UsageMetric.  # noqa: E501
        :type general_usage: List[MetricData]
        :param dev_api_usage: The dev_api_usage of this UsageMetric.  # noqa: E501
        :type dev_api_usage: List[MetricData]
        """
        self.swagger_types = {
            "user_id": str,
            "reported_on": str,
            "subscription_detail": str,
            "general_usage": List[MetricData],
            "dev_api_usage": List[MetricData],
        }

        self.attribute_map = {
            "user_id": "user_id",
            "reported_on": "reported_on",
            "subscription_detail": "subscription_detail",
            "general_usage": "general_usage",
            "dev_api_usage": "dev_api_usage",
        }
        self._user_id = user_id
        self._reported_on = reported_on
        self._subscription_detail = subscription_detail
        self._general_usage = general_usage
        self._dev_api_usage = dev_api_usage

    @classmethod
    def from_dict(cls, dikt) -> "UsageMetric":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UsageMetric of this UsageMetric.  # noqa: E501
        :rtype: UsageMetric
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UsageMetric.


        :return: The user_id of this UsageMetric.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UsageMetric.


        :param user_id: The user_id of this UsageMetric.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def reported_on(self) -> str:
        """Gets the reported_on of this UsageMetric.


        :return: The reported_on of this UsageMetric.
        :rtype: str
        """
        return self._reported_on

    @reported_on.setter
    def reported_on(self, reported_on: str):
        """Sets the reported_on of this UsageMetric.


        :param reported_on: The reported_on of this UsageMetric.
        :type reported_on: str
        """

        self._reported_on = reported_on

    @property
    def subscription_detail(self) -> str:
        """Gets the subscription_detail of this UsageMetric.


        :return: The subscription_detail of this UsageMetric.
        :rtype: str
        """
        return self._subscription_detail

    @subscription_detail.setter
    def subscription_detail(self, subscription_detail: str):
        """Sets the subscription_detail of this UsageMetric.


        :param subscription_detail: The reported_on of this UsageMetric.
        :type subscription_detail: str
        """

        self._subscription_detail = subscription_detail

    @property
    def general_usage(self) -> List[MetricData]:
        """Gets the general_usage of this UsageMetric.


        :return: The general_usage of this UsageMetric.
        :rtype: List[MetricData]
        """
        return self._general_usage

    @general_usage.setter
    def general_usage(self, general_usage: List[MetricData]):
        """Sets the general_usage of this UsageMetric.


        :param general_usage: The general_usage of this UsageMetric.
        :type general_usage: List[MetricData]
        """

        self._general_usage = general_usage

    @property
    def dev_api_usage(self) -> List[MetricData]:
        """Gets the dev_api_usage of this UsageMetric.


        :return: The dev_api_usage of this UsageMetric.
        :rtype: List[MetricData]
        """
        return self._dev_api_usage

    @dev_api_usage.setter
    def dev_api_usage(self, dev_api_usage: List[MetricData]):
        """Sets the dev_api_usage of this UsageMetric.


        :param dev_api_usage: The dev_api_usage of this UsageMetric.
        :type dev_api_usage: List[MetricData]
        """

        self._dev_api_usage = dev_api_usage
